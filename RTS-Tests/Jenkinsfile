pipeline{
    agent any
	parameters {
		string(name: 'serverEnv', defaultValue: 'DV1', description: 'Server Environment')
	}
    stages{

        stage("Source"){
            steps{
               echo "========executing Source========"
               cleanWs()
               git branch: 'master',
                  url: 'https://github.com/MarkPhillips/RTS-Tests.git'
            }
            post{
                success{
                    echo "========source download succeeded ========"
                }
                failure{
                    echo "========source download failed========"
                    emailext (
                     subject: "Job: ${currentBuild.projectName} Source Download ${currentBuild.result}",
                     mimeType: 'text/html',
                     body: """
                        Source Download Results: ${currentBuild.result}<br/>
                        Job: ${currentBuild.projectName}<br/>
                        Build: ${currentBuild.number}<br/>
                        <p>Check source download results at: <a href='${currentBuild.absoluteUrl}console'>${currentBuild.projectName} build ${currentBuild.number}</a></p>""",
                     to: 'mgphillips1@gmail.com'
                  )
                }
            }
        }

         stage("Build"){
            environment{
               MSBUILD = "C:/Program Files (x86)/Microsoft Visual Studio/2017/Professional/MSBuild/15.0/Bin/MSBuild.exe"
               CONFIG='Release'
               PLATFORM="Any CPU"
               BUILD_FILE='RTS-Tests.sln'
            }
            steps{
               echo "======== Starting Build========"
               bat "Nuget.exe restore ${BUILD_FILE}"
			   bat "\"${MSBUILD}\" RTS-Tests.sln /t:Clean,Build /p:Configuration=${env.CONFIG};Platform=\"${PLATFORM}\""
              /*bat "\"${MSBUILD}\" ${BUILD_FILE} /t:Clean,Build /p:Configuration=${env.CONFIG};Platform=${PLATFORM}"*/
            }
            post{
                success{
                  echo "========build succeeded ========"
                }
                failure{
                  echo "========build failed========"
                  emailext (
                     subject: "Job: ${currentBuild.projectName} Build ${currentBuild.result}",
                     mimeType: 'text/html',
                     body: """
                        Build Results: ${currentBuild.result}<br/>
                        Job: ${currentBuild.projectName}<br/>
                        Build: ${currentBuild.number}<br/>
                        <p>Check build results at: <a href='${currentBuild.absoluteUrl}console'>${currentBuild.projectName} build ${currentBuild.number}</a></p>""",
                     to: 'mgphillips1@gmail.com'
                  )
                  error("Failed to build")
                }
            }
         }
      }

    }
    post{
        always{
            echo "========always========"
        }
        success{
            echo "========pipeline executed successfully ========"
        }
        failure{
            echo "========pipeline execution failed========"
        }
    }

}